services:
  # API Gateway
  api-gateway:
    build: 
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: enic-api-gateway
    ports:
      - "8000:8000"
    env_file:
      - ./api-gateway/.env
    depends_on:
      - auth-service
      - news-service
      - ticket-service
    networks:
      - enic-network

  # Auth Service
  auth-service:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: enic-auth-service
    ports:
      - "8080:8080"
    env_file:
      - ./auth-service/.env
    # Закомментируем проблемный volume пока не создадим директорию
    # volumes:
    #   - ./auth-service/migrations:/app/migrations
    depends_on:
      auth-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_HOST=auth-db
      - DB_PORT=5432
      - DB_NAME=${AUTH_DB_NAME:-auth_db}
      - DB_USER=${AUTH_DB_USER:-auth_user}
      - DB_PASSWORD=${AUTH_DB_PASSWORD:-auth_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
    networks:
      - enic-network

  # News Service
  news-service:
    build: 
      context: ./news-service
      dockerfile: Dockerfile
    container_name: enic-news-service
    ports:
      - "8081:8081"
    env_file:
      - ./news-service/.env
    # Закомментируем volume пока не убедимся, что файл существует
    # volumes:
    #   - ./news-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    depends_on:
      news-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_HOST=news-db
      - DB_PORT=5432
      - DB_NAME=${NEWS_DB_NAME:-news_db}
      - DB_USER=${NEWS_DB_USER:-news_user}
      - DB_PASSWORD=${NEWS_DB_PASSWORD:-news_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
    networks:
      - enic-network

  # Ticket Service
  ticket-service:
    build: 
      context: ./ticket-service
      dockerfile: Dockerfile
    container_name: enic-ticket-service
    ports:
      - "8082:8082"
    env_file:
      - ./ticket-service/.env
    # Закомментируем volume пока не создадим директорию
    # volumes:
    #   - ./ticket-service/migrations:/app/migrations
    depends_on:
      ticket-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
      clamav:
        condition: service_started
    environment:
      - DB_HOST=ticket-db
      - DB_PORT=5432
      - DB_NAME=${TICKET_DB_NAME:-ticket_db}
      - DB_USER=${TICKET_DB_USER:-ticket_user}
      - DB_PASSWORD=${TICKET_DB_PASSWORD:-ticket_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minio_admin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-strong_minio_password}
      - MINIO_BUCKET_NAME=tickets
      - MINIO_REGION=us-east-1
      - MINIO_USE_SSL=false
      - CLAMAV_HOST=clamav
    networks:
      - enic-network

  # Databases
  auth-db:
    image: postgres:16-alpine
    container_name: enic-auth-db
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME:-auth_db}
      POSTGRES_USER: ${AUTH_DB_USER:-auth_user}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD:-auth_password}
    volumes:
      - auth-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER:-auth_user} -d ${AUTH_DB_NAME:-auth_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - enic-network

  news-db:
    image: postgres:16-alpine
    container_name: enic-news-db
    environment:
      POSTGRES_DB: ${NEWS_DB_NAME:-news_db}
      POSTGRES_USER: ${NEWS_DB_USER:-news_user}
      POSTGRES_PASSWORD: ${NEWS_DB_PASSWORD:-news_password}
    volumes:
      - news-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${NEWS_DB_USER:-news_user} -d ${NEWS_DB_NAME:-news_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - enic-network

  ticket-db:
    image: postgres:16-alpine
    container_name: enic-ticket-db
    environment:
      POSTGRES_DB: ${TICKET_DB_NAME:-ticket_db}
      POSTGRES_USER: ${TICKET_DB_USER:-ticket_user}
      POSTGRES_PASSWORD: ${TICKET_DB_PASSWORD:-ticket_password}
    volumes:
      - ticket-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TICKET_DB_USER:-ticket_user} -d ${TICKET_DB_NAME:-ticket_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - enic-network

  # Redis для кэширования и сессий
  redis:
    image: redis:7-alpine
    container_name: enic-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - enic-network

  # MinIO для хранения файлов
  minio:
    image: minio/minio
    container_name: enic-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-strong_minio_password}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - enic-network

  # MinIO setup service
  minio-setup:
    image: minio/mc
    container_name: enic-minio-setup
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-strong_minio_password}
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      mc alias set myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&
      mc mb myminio/tickets --ignore-existing &&
      mc anonymous set download myminio/tickets &&
      exit 0
      "
    networks:
      - enic-network

  # ClamAV для сканирования файлов
  clamav:
    image: clamav/clamav:latest
    container_name: enic-clamav
    ports:
      - "3310:3310"
    volumes:
      - clamav-data:/var/lib/clamav
    networks:
      - enic-network

networks:
  enic-network:
    name: enic-network
    driver: bridge

volumes:
  auth-data:
    name: enic-auth-data
  news-data:
    name: enic-news-data
  ticket-data:
    name: enic-ticket-data
  redis-data:
    name: enic-redis-data
  minio-data:
    name: enic-minio-data
  clamav-data:
    name: enic-clamav-data
