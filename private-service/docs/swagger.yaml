basePath: /api/v1
definitions:
  handlers.DeleteUserRequest:
    properties:
      userId:
        type: string
    type: object
  handlers.DemoteToUserRequest:
    properties:
      adminId:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.PromoteToAdminRequest:
    properties:
      userId:
        type: string
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.RequestResetRequest:
    properties:
      email:
        type: string
    type: object
  handlers.RequestResetResponse:
    properties:
      message:
        type: string
    type: object
  handlers.ResetPasswordRequest:
    properties:
      newPassword:
        type: string
      token:
        type: string
    type: object
  handlers.ResetPasswordResponse:
    properties:
      message:
        type: string
    type: object
  handlers.ResponseMessage:
    properties:
      message:
        type: string
    type: object
  handlers.Verify2FARequest:
    properties:
      code:
        type: string
      email:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      failedLoginAttempts:
        type: integer
      id:
        type: string
      is2FAEnabled:
        type: boolean
      isActive:
        type: boolean
      lastFailedLogin:
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      updatedAt:
        type: string
    type: object
  models.UserRole:
    enum:
    - user
    - admin
    - root_admin
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
    - RoleRootAdmin
host: localhost:8080
info:
  contact: {}
  description: Admin and user management microservice with role-based access control
  title: Private Service API
  version: "1.0"
paths:
  /admin/demote:
    post:
      consumes:
      - application/json
      description: Demotes an admin to regular user role (requires root_admin privileges)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Admin ID to demote
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.DemoteToUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Admin demoted to user successfully
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Invalid admin ID format
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "401":
          description: Unauthorized - requires root_admin privileges
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "403":
          description: Forbidden - cannot demote root_admin
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Demote admin to user role
      tags:
      - admin
  /admin/metrics:
    get:
      description: Returns system metrics and statistics (requires admin or root_admin
        privileges)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: System metrics
          schema: {}
        "401":
          description: Unauthorized - requires admin privileges
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Get system metrics
      tags:
      - admin
  /admin/promote:
    post:
      consumes:
      - application/json
      description: Promotes a regular user to admin role (requires admin or root_admin
        privileges)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID to promote
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.PromoteToAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User promoted to admin successfully
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "401":
          description: Unauthorized - requires admin privileges
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Promote user to admin role
      tags:
      - admin
  /admin/users:
    get:
      description: Returns a list of all users in the system (requires admin or root_admin
        privileges)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized - requires admin privileges
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "403":
          description: Forbidden - insufficient permissions
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: List all users
      tags:
      - admin
  /admin/users/delete:
    post:
      consumes:
      - application/json
      description: Deletes a user or admin account (admin can delete users, root_admin
        can delete both users and admins)
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID to delete
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.DeleteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "401":
          description: Unauthorized - requires admin privileges
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "403":
          description: Forbidden - insufficient permissions or cannot delete root_admin
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Delete user or admin
      tags:
      - admin
  /auth/confirm:
    get:
      description: Activates a user account using the confirmation token from email
      parameters:
      - description: Confirmation token from email
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Account activation success message
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Invalid token, expired token, or already confirmed account
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Confirm user account
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns JWT tokens in HTTP-only cookies
      parameters:
      - description: Email and password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful message
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Invalid input or missing fields
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "401":
          description: Invalid credentials or account not confirmed
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Log in a user
      tags:
      - auth
  /auth/password-reset-confirm:
    post:
      consumes:
      - application/json
      description: Sets a new password using the provided reset token
      parameters:
      - description: Reset token and new password
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset success message
          schema:
            $ref: '#/definitions/handlers.ResetPasswordResponse'
        "400":
          description: Invalid token, expired token, or invalid password format
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Reset password
      tags:
      - auth
  /auth/password-reset-request:
    post:
      consumes:
      - application/json
      description: Sends password reset instructions to the provided email address
      parameters:
      - description: Email address
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.RequestResetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success message (sent regardless of email existence for security)
          schema:
            $ref: '#/definitions/handlers.RequestResetResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Request password reset
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account and sends confirmation email
      parameters:
      - description: User credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful message
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Invalid input or missing fields
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Register a new user
      tags:
      - auth
  /auth/validate:
    get:
      description: Validates the access token from cookie and returns user claims
      produces:
      - application/json
      responses:
        "200":
          description: User claims including user_id, role, and expiresAt
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Missing or invalid token
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Validate JWT token from cookie
      tags:
      - auth
  /auth/verify-2fa:
    post:
      consumes:
      - application/json
      description: Verifies 2FA code and issues JWT tokens in HTTP-only cookies if
        valid
      parameters:
      - description: Email and 2FA code
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handlers.Verify2FARequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA verification successful
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "400":
          description: Invalid code or expired code
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ResponseMessage'
      summary: Verify 2FA code for admin
      tags:
      - auth
swagger: "2.0"
