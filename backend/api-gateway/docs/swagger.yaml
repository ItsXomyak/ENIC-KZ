swagger: "2.0"
info:
  description: API Gateway for ENIC-KZ microservices
  title: ENIC-KZ API Gateway
  version: "1.0"
host: localhost:8085
basePath: /api/v1
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: auth
    description: Authentication and authorization operations
  - name: admin
    description: Administrative operations
  - name: news
    description: News management
  - name: tickets
    description: Support ticket operations
  - name: responses
    description: Ticket response operations
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register new user
      description: Register a new user in the system
      parameters:
        - name: input
          in: body
          description: Registration data
          required: true
          schema:
            $ref: "#/definitions/RegisterRequest"
      responses:
        200:
          description: Registration successful
          schema:
            $ref: "#/definitions/APIResponse"
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      description: Authenticate user and get access token
      parameters:
        - name: input
          in: body
          description: Login credentials
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: Login successful
          schema:
            $ref: "#/definitions/APIResponse"
        401:
          description: Invalid credentials
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/verify-2fa:
    post:
      tags:
        - auth
      summary: Verify 2FA code
      description: Verify two-factor authentication code
      parameters:
        - name: input
          in: body
          description: 2FA verification code
          required: true
          schema:
            $ref: "#/definitions/Verify2FARequest"
      responses:
        200:
          description: 2FA verification successful
          schema:
            $ref: "#/definitions/APIResponse"
        400:
          description: Invalid code
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/confirm:
    post:
      tags:
        - auth
      summary: Confirm account
      description: Confirm user account after registration
      parameters:
        - name: input
          in: body
          description: Confirmation data
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
                example: "confirmation-token"
      responses:
        200:
          description: Account confirmed successfully
          schema:
            $ref: "#/definitions/APIResponse"
        400:
          description: Invalid token
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/password-reset-request:
    post:
      tags:
        - auth
      summary: Request password reset
      description: Request a password reset link
      parameters:
        - name: input
          in: body
          description: Password reset request data
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                example: "user@example.com"
      responses:
        200:
          description: Password reset link sent
          schema:
            $ref: "#/definitions/APIResponse"
        400:
          description: Invalid email
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/password-reset-confirm:
    post:
      tags:
        - auth
      summary: Reset password
      description: Reset password using token
      parameters:
        - name: input
          in: body
          description: Password reset data
          required: true
          schema:
            type: object
            properties:
              token:
                type: string
                example: "reset-token"
              new_password:
                type: string
                example: "newStrongPassword123"
      responses:
        200:
          description: Password reset successful
          schema:
            $ref: "#/definitions/APIResponse"
        400:
          description: Invalid token or password
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/validate:
    get:
      tags:
        - auth
      summary: Validate token
      description: Validate authentication token
      responses:
        200:
          description: Token is valid
          schema:
            $ref: "#/definitions/APIResponse"
        401:
          description: Invalid token
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/metrics:
    get:
      tags:
        - admin
      summary: Get system metrics
      description: Get various system metrics and statistics
      responses:
        200:
          description: Metrics retrieved successfully
          schema:
            $ref: "#/definitions/Metrics"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/users:
    get:
      tags:
        - admin
      summary: List users
      description: Get list of all users (admin only)
      responses:
        200:
          description: Users retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/promote:
    post:
      tags:
        - admin
      summary: Promote user to admin
      description: Promote a user to admin role (admin only)
      parameters:
        - name: input
          in: body
          description: User promotion data
          required: true
          schema:
            type: object
            properties:
              user_id:
                type: integer
                example: 1
      responses:
        200:
          description: User promoted successfully
          schema:
            $ref: "#/definitions/APIResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/demote:
    post:
      tags:
        - admin
      summary: Demote admin to user
      description: Demote an admin to user role (root admin only)
      parameters:
        - name: input
          in: body
          description: User demotion data
          required: true
          schema:
            type: object
            properties:
              user_id:
                type: integer
                example: 1
      responses:
        200:
          description: User demoted successfully
          schema:
            $ref: "#/definitions/APIResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"

  /admin/users/delete:
    delete:
      tags:
        - admin
      summary: Delete user
      description: Delete a user from the system (admin only)
      parameters:
        - name: input
          in: body
          description: User deletion data
          required: true
          schema:
            type: object
            properties:
              user_id:
                type: integer
                example: 1
      responses:
        200:
          description: User deleted successfully
          schema:
            $ref: "#/definitions/APIResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"

  /news:
    get:
      tags:
        - news
      summary: Get all news
      description: Get list of all news items
      responses:
        200:
          description: News retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/NewsItem"
    post:
      tags:
        - news
      summary: Create news item
      description: Create a new news item
      parameters:
        - name: input
          in: body
          description: News item data
          required: true
          schema:
            $ref: "#/definitions/NewsItem"
      responses:
        201:
          description: News item created successfully
          schema:
            $ref: "#/definitions/APIResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"

  /news/{id}:
    get:
      tags:
        - news
      summary: Get news by ID
      description: Get a specific news item by ID
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the news item
      responses:
        200:
          description: News item retrieved successfully
          schema:
            $ref: "#/definitions/NewsItem"
        404:
          description: News item not found
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - news
      summary: Update news
      description: Update an existing news item
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the news item
        - name: input
          in: body
          description: Updated news data
          required: true
          schema:
            $ref: "#/definitions/NewsItem"
      responses:
        200:
          description: News item updated successfully
          schema:
            $ref: "#/definitions/APIResponse"
        404:
          description: News item not found
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - news
      summary: Delete news
      description: Delete a news item
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the news item
      responses:
        200:
          description: News item deleted successfully
          schema:
            $ref: "#/definitions/APIResponse"
        404:
          description: News item not found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /tickets:
    get:
      tags:
        - tickets
      summary: Get all tickets
      description: Get list of all support tickets
      responses:
        200:
          description: Tickets retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/Ticket"
    post:
      tags:
        - tickets
      summary: Create ticket
      description: Create a new support ticket
      parameters:
        - name: input
          in: body
          description: Ticket data
          required: true
          schema:
            $ref: "#/definitions/Ticket"
      responses:
        201:
          description: Ticket created successfully
          schema:
            $ref: "#/definitions/APIResponse"

  /tickets/{id}:
    get:
      tags:
        - tickets
      summary: Get ticket by ID
      description: Get a specific ticket by ID
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the ticket
      responses:
        200:
          description: Ticket retrieved successfully
          schema:
            $ref: "#/definitions/Ticket"
        404:
          description: Ticket not found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /tickets/user:
    get:
      tags:
        - tickets
      summary: Get user tickets
      description: Get all tickets for the authenticated user
      responses:
        200:
          description: User tickets retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/Ticket"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"

  /tickets/user/{id}/history:
    get:
      tags:
        - tickets
      summary: Get ticket history
      description: Get history of a specific ticket
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the ticket
      responses:
        200:
          description: Ticket history retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/Ticket"
        404:
          description: Ticket not found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /tickets/{id}/status:
    put:
      tags:
        - tickets
      summary: Update ticket status
      description: Update the status of a ticket (admin only)
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the ticket
        - name: input
          in: body
          description: New status data
          required: true
          schema:
            type: object
            properties:
              status:
                type: string
                example: "resolved"
      responses:
        200:
          description: Ticket status updated successfully
          schema:
            $ref: "#/definitions/APIResponse"
        404:
          description: Ticket not found
          schema:
            $ref: "#/definitions/ErrorResponse"

  /tickets/search:
    get:
      tags:
        - tickets
      summary: Search tickets
      description: Search tickets by various criteria (admin only)
      parameters:
        - name: query
          in: query
          required: false
          type: string
          description: Search query
        - name: status
          in: query
          required: false
          type: string
          description: Ticket status
      responses:
        200:
          description: Search results retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/Ticket"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"

  /responses/ticket/{id}:
    get:
      tags:
        - responses
      summary: Get ticket responses
      description: Get all responses for a specific ticket
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the ticket
      responses:
        200:
          description: Responses retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/TicketResponse"
        404:
          description: Ticket not found
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
        - responses
      summary: Create ticket response
      description: Create a new response for a ticket (admin only)
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: ID of the ticket
        - name: input
          in: body
          description: Response data
          required: true
          schema:
            $ref: "#/definitions/TicketResponse"
      responses:
        201:
          description: Response created successfully
          schema:
            $ref: "#/definitions/APIResponse"
        401:
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Ticket not found
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
  RegisterRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        example: user@example.com
      password:
        type: string
        example: strongPassword123
  LoginRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        example: user@example.com
      password:
        type: string
        example: strongPassword123
  Verify2FARequest:
    type: object
    required:
      - code
    properties:
      code:
        type: string
        example: "123456"
  User:
    type: object
    properties:
      id:
        type: integer
        example: 1
      email:
        type: string
        example: user@example.com
      role:
        type: string
        example: user
      created_at:
        type: string
        format: date-time
        example: "2024-01-01T00:00:00Z"
  APIResponse:
    type: object
    properties:
      success:
        type: boolean
        example: true
      message:
        type: string
        example: Operation completed successfully
      data:
        type: object
  ErrorResponse:
    type: object
    properties:
      success:
        type: boolean
        example: false
      error:
        type: string
        example: Invalid input data
  Metrics:
    type: object
    properties:
      total_users:
        type: integer
        example: 100
      active_users:
        type: integer
        example: 50
      total_tickets:
        type: integer
        example: 200
      resolved_tickets:
        type: integer
        example: 150
  NewsItem:
    type: object
    properties:
      id:
        type: integer
        example: 1
      title:
        type: string
        example: Important Update
      content:
        type: string
        example: Detailed news content...
      author:
        type: string
        example: Admin Name
      published_at:
        type: string
        format: date-time
        example: "2024-01-01T00:00:00Z"
  Ticket:
    type: object
    properties:
      id:
        type: integer
        example: 1
      user_id:
        type: integer
        example: 1
      subject:
        type: string
        example: Technical Issue
      description:
        type: string
        example: Detailed description of the issue...
      status:
        type: string
        example: open
      created_at:
        type: string
        format: date-time
        example: "2024-01-01T00:00:00Z"
      updated_at:
        type: string
        format: date-time
        example: "2024-01-01T00:00:00Z"
  TicketResponse:
    type: object
    properties:
      id:
        type: integer
        example: 1
      ticket_id:
        type: integer
        example: 1
      admin_id:
        type: integer
        example: 1
      content:
        type: string
        example: Response to your ticket...
      created_at:
        type: string
        format: date-time
        example: "2024-01-01T00:00:00Z"
