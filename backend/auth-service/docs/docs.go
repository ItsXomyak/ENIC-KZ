// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/confirm": {
            "get": {
                "description": "Activates a user account using the confirmation token from email",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Confirm user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Confirmation token from email",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account activation success message",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid token, expired token, or already confirmed account",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates user and returns JWT tokens in HTTP-only cookies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "Email and password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful message",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid input or missing fields",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials or account not confirmed",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/password-reset-confirm": {
            "post": {
                "description": "Sets a new password using the provided reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset token and new password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset success message",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid token, expired token, or invalid password format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/password-reset-request": {
            "post": {
                "description": "Sends password reset instructions to the provided email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Email address",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RequestResetRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message (sent regardless of email existence for security)",
                        "schema": {
                            "$ref": "#/definitions/handlers.RequestResetResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Creates a new user account and sends confirmation email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful message",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid input or missing fields",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/validate": {
            "get": {
                "description": "Validates the access token from cookie and returns user claims",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Validate JWT token from cookie",
                "responses": {
                    "200": {
                        "description": "User claims including user_id, role, and expiresAt",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Missing or invalid token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/auth/verify-2fa": {
            "post": {
                "description": "Verifies 2FA code and issues JWT tokens in HTTP-only cookies if valid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify 2FA code for admin",
                "parameters": [
                    {
                        "description": "Email and 2FA code",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.Verify2FARequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "2FA verification successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid code or expired code",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ResponseMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.RequestResetRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "handlers.RequestResetResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "newPassword": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "handlers.ResetPasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.ResponseMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.Verify2FARequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "AuthForge API",
	Description:      "Authentication microservice with JWT and cookie-based login",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
