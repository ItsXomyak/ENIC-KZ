services:
  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: enic-api-gateway
    ports:
      - '8085:8085'
    env_file:
      - ./api-gateway/.env
    depends_on:
      - private-service
      - news-service
      - ticket-service
    networks:
      - enic-network

  # Auth Service (private-service)
  private-service:
    build:
      context: ./private-service
      dockerfile: Dockerfile
    container_name: enic-private-service
    ports:
      - '8080:8080'
    env_file:
      - ./private-service/.env
    depends_on:
      private-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enic-network

  # News Service
  news-service:
    build:
      context: ./news-service
      dockerfile: Dockerfile
    container_name: enic-news-service
    ports:
      - '8081:8081'
    env_file:
      - ./news-service/.env
    depends_on:
      news-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enic-network

  # Ticket Service
  ticket-service:
    build:
      context: ./ticket-service
      dockerfile: Dockerfile
    container_name: enic-ticket-service
    ports:
      - '8082:8082'
    env_file:
      - ./ticket-service/.env
    depends_on:
      ticket-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
      clamav:
        condition: service_started
    networks:
      - enic-network

  # Databases
  private-db:
    image: postgres:16-alpine
    container_name: enic-private-db
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - private-data:/var/lib/postgresql/data
      - ./private-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-auth_db}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - enic-network

  news-db:
    image: postgres:16-alpine
    container_name: enic-news-db
    ports:
      - '5433:5432'
    environment:
      POSTGRES_DB: news_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - news-data:/var/lib/postgresql/data
      - ./news-service/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-news_db}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - enic-network

  ticket-db:
    image: postgres:16-alpine
    container_name: enic-ticket-db
    ports:
      - '5434:5432'
    environment:
      POSTGRES_DB: ticket_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ticket-data:/var/lib/postgresql/data
      - ./ticket-service/migrations/000001_init.up.sql:/docker-entrypoint-initdb.d/1_init.sql:ro
      - ./ticket-service/migrations/000001_init.down.sql:/docker-entrypoint-initdb.d/2_cleanup.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-ticket_db}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - enic-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: enic-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-1488}
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - enic-network

  # MinIO
  minio:
    image: minio/minio
    container_name: enic-minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID:-minio_admin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY:-strong_minio_password}
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'mc', 'ready', 'local']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - enic-network

  minio-setup:
    image: minio/mc
    container_name: enic-minio-setup
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID:-minio_admin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY:-strong_minio_password}
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      mc alias set myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} &&
      mc mb myminio/tickets --ignore-existing &&
      mc anonymous set download myminio/tickets &&
      exit 0
      "
    networks:
      - enic-network

  # ClamAV
  clamav:
    image: clamav/clamav:latest
    container_name: enic-clamav
    ports:
      - '3310:3310'
    volumes:
      - clamav-data:/var/lib/clamav
    networks:
      - enic-network

networks:
  enic-network:
    name: enic-network
    driver: bridge

volumes:
  private-data:
    name: enic-private-data
  news-data:
    name: enic-news-data
  ticket-data:
    name: enic-ticket-data
  redis-data:
    name: enic-redis-data
  minio-data:
    name: enic-minio-data
  clamav-data:
    name: enic-clamav-data
