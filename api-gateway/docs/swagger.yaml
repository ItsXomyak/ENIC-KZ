openapi: 3.0.0
info:
  title: ENIC-KZ API Gateway
  description: |
    Единый API Gateway для сервисов ENIC-KZ, объединяющий:
    - Сервис аутентификации (AuthForge API)
    - Сервис новостей (News Service)
    - Сервис поддержки (Ticket Service)
  version: 1.0.0
  contact:
    name: ENIC-KZ Support
    email: support@enic.kz

servers:
  - url: http://localhost:8085
    description: Local Development Server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access_token
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Auth Service Schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum: [user, admin]
      required:
        - email
        - password
        - role

    RequestResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email

    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
        newPassword:
          type: string
          format: password
      required:
        - token
        - newPassword

    Verify2FARequest:
      type: object
      properties:
        email:
          type: string
          format: email
        code:
          type: string
      required:
        - email
        - code

    ResponseMessage:
      type: object
      properties:
        message:
          type: string

    # News Service Schemas
    News:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category_id:
          type: integer
        created_at:
          type: string
          format: date-time
        publish_date:
          type: string
          format: date-time
        translations:
          type: array
          items:
            $ref: '#/components/schemas/NewsTranslation'

    NewsTranslation:
      type: object
      properties:
        id:
          type: integer
        news_id:
          type: string
        lang:
          type: string
          enum: [kz, ru, en]
          description: '"kz", "ru", "en"'
        title:
          type: string
        content:
          type: string

    # Ticket Service Schemas
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        subject:
          type: string
        question:
          type: string
        email:
          type: string
          format: email
        full_name:
          type: string
        phone:
          type: string
        status:
          type: string
          enum: [new, in_progress, resolved, closed]
        notify_email:
          type: boolean
        notify_tg:
          type: boolean
        user_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateTicketRequest:
      type: object
      required:
        - subject
        - question
        - full_name
      properties:
        subject:
          type: string
          minLength: 3
          maxLength: 100
        question:
          type: string
          minLength: 10
          maxLength: 2000
        email:
          type: string
          format: email
        full_name:
          type: string
          minLength: 2
          maxLength: 100
        phone:
          type: string
          pattern: "^\\+?[0-9]{10,15}$"
        notify_email:
          type: boolean
          default: true
        notify_tg:
          type: boolean
          default: false
        file:
          type: string
          format: binary

    UpdateStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [new, in_progress, resolved, closed]
        comment:
          type: string
          maxLength: 1000

    Response:
      type: object
      properties:
        id:
          type: integer
        ticket_id:
          type: integer
        admin_id:
          type: integer
        message:
          type: string
        created_at:
          type: string
          format: date-time
        file_url:
          type: string

paths:
  # Auth Service Routes
  /api/v1/auth/login:
    post:
      tags: [Auth]
      summary: Аутентификация пользователя
      description: Authenticates user and sets access and refresh JWT cookies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /api/v1/auth/register:
    post:
      tags: [Auth]
      summary: Регистрация нового пользователя
      description: Creates a new user account and sends confirmation email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '400':
          description: Invalid input
        '500':
          description: Internal error

  /api/v1/auth/confirm:
    get:
      tags: [Auth]
      summary: Подтверждение аккаунта
      description: Activates user account by confirmation token from query
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Invalid or expired token

  /api/v1/auth/password-reset-request:
    post:
      tags: [Auth]
      summary: Запрос на сброс пароля
      description: Sends password reset instructions to email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestResetRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '400':
          description: Invalid request

  /api/v1/auth/password-reset-confirm:
    post:
      tags: [Auth]
      summary: Подтверждение сброса пароля
      description: Resets password using provided token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '400':
          description: Invalid or expired token

  /api/v1/auth/verify-2fa:
    post:
      tags: [Auth]
      summary: Проверка 2FA кода
      description: Checks a 2FA code and, if valid, issues JWT cookies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify2FARequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        '400':
          description: Invalid or expired code
        '500':
          description: Internal error

  /api/v1/auth/validate:
    get:
      tags: [Auth]
      summary: Проверка JWT токена
      description: Returns user claims if token is valid
      security:
        - cookieAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '401':
          description: Unauthorized

  # News Service Routes
  /api/v1/news:
    get:
      tags: [News]
      summary: Получение списка новостей
      description: Возвращает список новостей с поддержкой фильтров
      parameters:
        - name: category
          in: query
          description: Код категории (например, general, education)
          schema:
            type: string
        - name: from
          in: query
          description: 'Начальная дата публикации (формат: YYYY-MM-DD)'
          schema:
            type: string
        - name: to
          in: query
          description: 'Конечная дата публикации (формат: YYYY-MM-DD)'
          schema:
            type: string
        - name: limit
          in: query
          description: Максимальное количество новостей
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          description: Смещение от начала
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/News'
        '500':
          description: Internal Server Error

    post:
      tags: [News]
      summary: Создание новости
      description: Создаёт новую новость с переводами и категорией
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /api/v1/news/{id}:
    get:
      tags: [News]
      summary: Получение новости по ID
      description: Возвращает одну новость по её UUID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '404':
          description: Not Found

    put:
      tags: [News]
      summary: Обновление новости
      description: Обновляет существующую новость
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

    delete:
      tags: [News]
      summary: Удаление новости
      description: Удаляет новость по её UUID
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '500':
          description: Internal Server Error

  # Ticket Service Routes
  /api/v1/tickets:
    post:
      tags: [Tickets]
      summary: Создание тикета
      description: Creates a new support ticket with optional file attachment
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

    get:
      tags: [Tickets]
      summary: Список всех тикетов
      description: Get a list of all tickets (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [new, in_progress, resolved, closed]
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at_asc, created_at_desc, updated_at_asc, updated_at_desc]
            default: created_at_desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /api/v1/tickets/{id}:
    get:
      tags: [Tickets]
      summary: Получение тикета по ID
      description: Get detailed information about a specific ticket
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '404':
          description: Not Found

  /api/v1/tickets/user:
    get:
      tags: [Tickets]
      summary: Тикеты текущего пользователя
      description: Get a list of tickets created by the current user
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [new, in_progress, resolved, closed]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  tickets:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized

  /api/v1/tickets/{id}/status:
    put:
      tags: [Tickets]
      summary: Обновление статуса тикета
      description: Update the status of a ticket (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /api/v1/responses/ticket/{id}:
    post:
      tags: [Responses]
      summary: Добавление ответа на тикет
      description: Add a new response to a ticket (admin only)
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  minLength: 1
                  maxLength: 2000
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    get:
      tags: [Responses]
      summary: Получение ответов на тикет
      description: Get all responses for a specific ticket
      security:
        - cookieAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  responses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Response'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

tags:
  - name: Auth
    description: Операции аутентификации и авторизации
  - name: News
    description: Управление новостями
  - name: Tickets
    description: Система поддержки пользователей
  - name: Responses
    description: Управление ответами на тикеты 